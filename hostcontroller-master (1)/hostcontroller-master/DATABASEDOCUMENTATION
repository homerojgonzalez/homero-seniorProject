This document contains information on how the pilots,  gliders, airfields, runways, glider positions,
winch positions, drums and parachutes are saved. Also, it includes information on how complete
flight scenarios are saved. 

General Notes About the Database -
The database intracts with the objects inside of Data Objects. For each add, edit, get list, and 
database import function, a data object is created and used. Therefore if the information added or 
taken away from any object is deemed significant enough to included or removed from the database, or 
if the constructors for any data object is changed, each of these functions will need to be updated. 
Also editing this information will change how the flight scenarios are saved. The objects themselves 
are not responsible for interacting with the database, rather they are passed into DatabaseUtilities 
functions, which interacts with the database.

Database Initialization -
Databases are initalized in DatabaseUtilities/DatabaseInitialization. They connection is created, 
all previous tables are dropped, then each table is created and a confimation string is output. If 
one table fails to be created it will not stop the other tables from being made. For specifics of 
each table, refer to HALP ME INSERT THINGAMIGER. Then units tables are created which store the 
essential information about how the different units associated with each type of value.

Database Data Object Utilites -
DatabaseUtilites/DatabaseDataObjectUtilites contains general functions for database use. The two 
main, repeated functions in this class are add entry and get list of entry.  When called, add entry 
will ask the given object for each of it's fields and create a statement to add a line to the 
appropriate table. When asked for a list of all the objects in a given table, the function reads 
each line and creates an object by parsing all the relevent information. The object is then added 
to an array list which is returned at the end of the function.

Database Entry Edit -
DatabaseUtilites/DatabaseEntryEdit allows the user to edit any editable object in the database. 
The function finds the id in the appropriate table and updates the information to contain the 
information in the new object.

Database Entry Delete - 
DatabaseUtilites/DatabaseEntryDelete allows the user to delete an object in the database. The 
function finds the id in the appropriate table and removes the object from the database. This is 
only dependant on being able to obtain the object's unique id.

Database Entry Id Check -
DatabaseUtilites/DatabaseEntryIdCheck simply checks if an object is already within the database. 
This is used when a new object is created, a new id is generated and this file is used to check 
if the id is already in the database. If the id already exists then a new one can be generated.

Database Importer -
DatabaseUtilites/DatabaseImporter reads in a zip file that contails all the tables to be imported. 
It reads each line as an object in a table and creates the appropriate object. Then, the add to 
database function from DatabaseDataObjectUtilites is called.

Database Exporter -
DatabaseUtilites/DatabaseExporter takes a list of tables to be exported and converts those tables 
to a zip file. This file is meant to remain unchanged to work with the Importer class.
